{
  "api/InventorySystem.EquipmentInventory.EquipmentInventoryFactory.html": {
    "href": "api/InventorySystem.EquipmentInventory.EquipmentInventoryFactory.html",
    "title": "Class EquipmentInventoryFactory | Inventory System",
    "summary": "Class EquipmentInventoryFactory Static factory to create IEquipmentInventorys. Inheritance object EquipmentInventoryFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: InventorySystem.EquipmentInventory Assembly: InventorySystem.dll Syntax public static class EquipmentInventoryFactory Methods | Edit this page View Source Create() Create a new IEquipmentInventory. Declaration public static IEquipmentInventory Create() Returns Type Description IEquipmentInventory A new IEquipmentInventory."
  },
  "api/InventorySystem.EquipmentInventory.EquipmentType.html": {
    "href": "api/InventorySystem.EquipmentInventory.EquipmentType.html",
    "title": "Enum EquipmentType | Inventory System",
    "summary": "Enum EquipmentType The type of equipment. Namespace: InventorySystem.EquipmentInventory Assembly: InventorySystem.dll Syntax [Serializable] public enum EquipmentType Fields Name Description Armor Weapon"
  },
  "api/InventorySystem.EquipmentInventory.IEquipmentInventory.html": {
    "href": "api/InventorySystem.EquipmentInventory.IEquipmentInventory.html",
    "title": "Interface IEquipmentInventory | Inventory System",
    "summary": "Interface IEquipmentInventory The interface for the equipment inventory. Manages equipped IEquipmentItems, including equipping, unequipping, and getting equipped items. Namespace: InventorySystem.EquipmentInventory Assembly: InventorySystem.dll Syntax public interface IEquipmentInventory Properties | Edit this page View Source EquippedItemList List of all currently equipped IEquipmentItems. Declaration IReadOnlyList<IEquipmentItem> EquippedItemList { get; } Property Value Type Description IReadOnlyList<IEquipmentItem> Remarks Does not make a contract about the amount of items inside. Does not contain null values, but can be empty. Methods | Edit this page View Source GetItem(EquipmentType) Get the IEquipmentItem for slot EquipmentType equipmentType. Declaration IEquipmentItem GetItem(EquipmentType equipmentType) Parameters Type Name Description EquipmentType equipmentType The EquipmentType to check for. Returns Type Description IEquipmentItem Returns the equipped IEquipmentItem. Returns null, if no IEquipmentItem is equipped in this slot. | Edit this page View Source TryEquip(IItem) Try to equip an IItem. Returns false if the IItem is not an IEquipmentItem. Returns false if the EquipmentType is not allowed in this IEquipmentInventory. Returns false if an IItem of the same EquipmentType is already equipped. Declaration bool TryEquip(IItem item) Parameters Type Name Description IItem item The IItem trying to be equipped. Returns Type Description bool Whether the IItem item was equipped. | Edit this page View Source Unequip(EquipmentType) Try to unequip an IEquipmentItem. Returns null if there was no IEquipmentItem equipped in the slot for EquipmentType equipmentType in EquippedItemList. Declaration IEquipmentItem Unequip(EquipmentType equipmentType) Parameters Type Name Description EquipmentType equipmentType The slot that the IEquipmentItem is being removed from. Returns Type Description IEquipmentItem Returns the unequipped IEquipmentItem. Returns null, if there was no item in the EquipmentType in EquippedItemList. Events | Edit this page View Source ItemEquipped Event invoked when an IItem was successfully equipped. Returns the newly equipped IItem. Declaration event Action<IItem> ItemEquipped Event Type Type Description Action<IItem> | Edit this page View Source ItemUnequipped Event invoked when an IItem was successfully unequipped. Returns the newly unequipped IItem. Declaration event Action<IItem> ItemUnequipped Event Type Type Description Action<IItem>"
  },
  "api/InventorySystem.EquipmentInventory.IEquipmentItem.html": {
    "href": "api/InventorySystem.EquipmentInventory.IEquipmentItem.html",
    "title": "Interface IEquipmentItem | Inventory System",
    "summary": "Interface IEquipmentItem Interface for all IItems that can be equipped. Inherited Members IItem.ItemData ICopyable<IItem>.DeepCopy() IEquivalent<IItem>.IsEquivalentTo(IItem) Namespace: InventorySystem.EquipmentInventory Assembly: InventorySystem.dll Syntax public interface IEquipmentItem : IItem, ICopyable<IItem>, IEquivalent<IItem> Properties | Edit this page View Source EquipmentType The EquipmentType in which this IEquipmentItem can be equipped in. Declaration EquipmentType EquipmentType { get; } Property Value Type Description EquipmentType"
  },
  "api/InventorySystem.EquipmentInventory.html": {
    "href": "api/InventorySystem.EquipmentInventory.html",
    "title": "Namespace InventorySystem.EquipmentInventory | Inventory System",
    "summary": "Namespace InventorySystem.EquipmentInventory Classes EquipmentInventoryFactory Static factory to create IEquipmentInventorys. Interfaces IEquipmentInventory The interface for the equipment inventory. Manages equipped IEquipmentItems, including equipping, unequipping, and getting equipped items. IEquipmentItem Interface for all IItems that can be equipped. Enums EquipmentType The type of equipment."
  },
  "api/InventorySystem.Inventory.IInventory.html": {
    "href": "api/InventorySystem.Inventory.IInventory.html",
    "title": "Interface IInventory | Inventory System",
    "summary": "Interface IInventory Interface for an Inventory managing IInventorySlots and the IItems inside. Exposes methods for adding, removing, and getting items. Namespace: InventorySystem.Inventory Assembly: InventorySystem.dll Syntax public interface IInventory Properties | Edit this page View Source Capacity Maximum amount of items that can be inside the IInventory. Declaration int Capacity { get; } Property Value Type Description int | Edit this page View Source InventorySlots Get all IInventorySlots in this. Declaration IReadOnlyList<IInventorySlot> InventorySlots { get; } Property Value Type Description IReadOnlyList<IInventorySlot> IReadOnlyList<T> of all IInventorySlots in this IInventory. Remarks WARNING: Also returns empty IInventorySlots. Thus, always returns a list of size equal to Capacity. | Edit this page View Source IsEmpty Whether the entire IInventory is empty meaning all IInventorySlots are empty. Declaration bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source Items Get all IItems in IInventory. Declaration IReadOnlyList<IItem> Items { get; } Property Value Type Description IReadOnlyList<IItem> IReadOnlyList<T> of all IItems in this IInventory. Remarks WARNING: Also returns empty IItems as null. Thus, always returns a list of size equal to Capacity. | Edit this page View Source MaxCapacity Maximum capacity of this IInventory. Declaration int MaxCapacity { get; } Property Value Type Description int See Also TryIncreaseCapacity(int) Methods | Edit this page View Source Clear() Clear the entire IInventory by clearing all IInventorySlots. Declaration void Clear() | Edit this page View Source Compact() Makes the IInventory compact meaning that all empty gaps between IInventorySlots are filled with IInventorySlot after the gaps. Declaration void Compact() Remarks Remains the order of IInventorySlots meaning that the first IInventorySlot after a gap is also the first that fills out that slot with the slots filling out empty slots from left to right. | Edit this page View Source IsSlotAvailable(IItem, out int) Whether an IItem item can be added into an IInventorySlot. Does not add the IItem. Declaration bool IsSlotAvailable(IItem item, out int addIndex) Parameters Type Name Description IItem item IItem to be checked. int addIndex First found index for the IItem item to be added into. Looks for index with equivalent, non-full IInventorySlot and empty slots second. Returns -1, if it cannot be added. Returns Type Description bool Whether the IItem can be added or not. Remarks Does not guarantee that the IItem can be added with a quantity greater than one. Only guarantees that there is either an empty IInventorySlot or a non-full IInventorySlot that is already occupied by the item that is to be added. It is still possible that the quantity of the IItem being added exceeds the MaxStackAmount and thus needs to occupy additional Slots to be fully added. | Edit this page View Source RemoveItem(IItem, bool, bool) Remove IItem item from the IInventory. If the IItem is in the IInventory, we clear its IInventorySlot. Declaration void RemoveItem(IItem item, bool isRemovingFirstOccurenceOnly = false, bool isReversed = false) Parameters Type Name Description IItem item IItem to be removed. bool isRemovingFirstOccurenceOnly Whether only the first occurence of the IItem in the IInventory gets removed (true) or all of its occurrences (i.e., we have the same IItem in multiple IInventorySlots). bool isReversed Start to remove items from the back. Does not have side effects. | Edit this page View Source Swap(int, int) Swap the content of the IInventorySlot at indexA with the content of the IInventorySlot at indexB. Declaration void Swap(int indexA, int indexB) Parameters Type Name Description int indexA The index of slot A. int indexB The index of slot B. | Edit this page View Source TryAddItem(IItem, int) Try to add an IItem into the first possible IInventorySlot. Declaration bool TryAddItem(IItem item, int quantity = 1) Parameters Type Name Description IItem item The IItem to be added. int quantity The number of IItem item to be added. Returns Type Description bool Whether the IItem item was added. Remarks Wrapper for TryAddItemAt(IItem, int, int). If the quantity exceeds the first found IInventorySlot capacity, it tries to find the next empty IInventorySlot and adds the leftover amount there. Loops recursively until all items are stored in the IInventory or until there is no more space available. If no more space is available, discards/ignores the remaining leftover. Returns true, even if any leftover is discarded. | Edit this page View Source TryAddItemAt(IItem, int, int) Try to add an IItem item into the IInventorySlot at index. Declaration bool TryAddItemAt(IItem item, int index, int quantity = 1) Parameters Type Name Description IItem item The IItem to be added. int index The index of the IInventorySlot that the item is trying to be added into. int quantity The number of IItem item to be added. Returns Type Description bool Whether the IItem item was added. Remarks If the quantity exceeds the Quantity of the IInventorySlot capacity, it tries to find the next non-full occupied IInventorySlot by the same IItem item or the next empty IInventorySlot and adds the leftover amount there. Loops recursively until all items are stored in the IInventory or until there is no more space available. If no more space is available, discards/ignores the remaining leftover. Returns true, even if any leftover is discarded. WARNING: If InventorySystem.Inventory.Inventory._handlesOverflow is true, it only tries to add the item to the first found IInventorySlot and returns true if any amount was added. | Edit this page View Source TryClearSlotAt(int) Try to clear the IInventorySlot, if it's valid. Declaration void TryClearSlotAt(int index) Parameters Type Name Description int index The index of the IInventorySlot to clear. | Edit this page View Source TryGetItemAt(int) Try to get IItem as index. Declaration IItem TryGetItemAt(int index) Parameters Type Name Description int index The index to look for IItem item. Returns Type Description IItem Returns IItem, if the index is inside the bounds of the Capacity. Otherwise, or if IInventorySlot IsEmpty, returns null. | Edit this page View Source TryGetSlotAt(int) Try to get the IInventorySlot at slotIndex. Declaration IInventorySlot TryGetSlotAt(int index) Parameters Type Name Description int index Index to look for the IInventorySlot Returns Type Description IInventorySlot IInventorySlot or null, if the index is higher than the Capacity. | Edit this page View Source TryIncreaseCapacity(int) Increases the Capacity of this up to MaxCapacity. Declaration bool TryIncreaseCapacity(int addedCapacity) Parameters Type Name Description int addedCapacity The amount of capacity to be added. Returns Type Description bool Whether the Capacity was increased at all. Also returns true, if the Capacity was not increased by the full addedCapacity. Remarks Discards negative numbers as this cannot decrease Capacity. If Capacity is already MaxCapacity or adding addedCapacity would increase Capacity to be higher than MaxCapacity Capacity gets set to MaxCapacity. | Edit this page View Source TryInsertItemAtFront(IItem, int) Try to insert an IItem at the front of the IInventory, i.e., in IInventorySlot 0. Declaration bool TryInsertItemAtFront(IItem item, int quantity = 1) Parameters Type Name Description IItem item The IItem to be added to the IInventory at the front. int quantity The quantity of IItem to be added. Returns Type Description bool Whether the IItem was added to the front. Remarks Pushed all other IItems already in the IInventory one slot up. FIXME: If quantity exceeds MaxStackAmount, it is possible that IItems that were previously in the IInventory get removed. Events | Edit this page View Source CapacityChanged Event invoked when the Capacity of this IInventory is changed. Declaration event Action<int> CapacityChanged Event Type Type Description Action<int> Returns the new Capacity of this IInventory. See Also TryIncreaseCapacity(int) | Edit this page View Source ItemsAdded Event invoked when IItems were successfully added to an IInventorySlot in this IInventory. Declaration event Action<IInventorySlot, int> ItemsAdded Event Type Type Description Action<IInventorySlot, int> Returns the IInventorySlot the IItem was added to and the index of the IInventorySlot. Remarks Triggered per slot that receives items; each invocation returns the added IItem and the quantity placed into that slot. (i.e., if more IItems are added than MaxStackAmount for one slot, and items are added to a second slot, the event will fire again for the second slot.) | Edit this page View Source ItemsRemoved Event invoked when IItems were successfully removed from an IInventorySlot in this IInventory. Declaration event Action<IInventorySlot, int> ItemsRemoved Event Type Type Description Action<IInventorySlot, int> Returns the IInventorySlot the IItem was removed from and the index of the IInventorySlot. Remarks Fired per slot that loses items; each invocation returns the removed IItem and the quantity taken from that slot."
  },
  "api/InventorySystem.Inventory.IInventorySlot.html": {
    "href": "api/InventorySystem.Inventory.IInventorySlot.html",
    "title": "Interface IInventorySlot | Inventory System",
    "summary": "Interface IInventorySlot An inventory slot in an IInventory, which manages one IItem with a certain Quantity. Namespace: InventorySystem.Inventory Assembly: InventorySystem.dll Syntax public interface IInventorySlot Properties | Edit this page View Source IsEmpty Whether an IItem is assigned to this IInventorySlot with a Quantity not equal 0. Declaration bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsFull Check if the Quantity greater than or equal to the assigned IItems MaxStackAmount. Declaration bool IsFull { get; } Property Value Type Description bool | Edit this page View Source Item Get IItem assigned to this IInventorySlot. Declaration IItem Item { get; } Property Value Type Description IItem | Edit this page View Source Quantity Get quantity of Item in this IInventorySlot. Declaration int Quantity { get; } Property Value Type Description int Remarks Quantity is limited by MaxStackAmount."
  },
  "api/InventorySystem.Inventory.InventoryFactory.html": {
    "href": "api/InventorySystem.Inventory.InventoryFactory.html",
    "title": "Class InventoryFactory | Inventory System",
    "summary": "Class InventoryFactory Static factory to create IInventorys. Inheritance object InventoryFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: InventorySystem.Inventory Assembly: InventorySystem.dll Syntax public static class InventoryFactory Methods | Edit this page View Source Create(int, bool, int) Declaration public static IInventory Create(int capacity = 2, bool handlesOverflow = true, int maxCapacity = 2) Parameters Type Name Description int capacity bool handlesOverflow int maxCapacity Returns Type Description IInventory"
  },
  "api/InventorySystem.Inventory.html": {
    "href": "api/InventorySystem.Inventory.html",
    "title": "Namespace InventorySystem.Inventory | Inventory System",
    "summary": "Namespace InventorySystem.Inventory Classes InventoryFactory Static factory to create IInventorys. Interfaces IInventory Interface for an Inventory managing IInventorySlots and the IItems inside. Exposes methods for adding, removing, and getting items. IInventorySlot An inventory slot in an IInventory, which manages one IItem with a certain Quantity."
  },
  "api/InventorySystem.Items.IItem.html": {
    "href": "api/InventorySystem.Items.IItem.html",
    "title": "Interface IItem | Inventory System",
    "summary": "Interface IItem Base interface for anything regarded as an Item. Inherited Members ICopyable<IItem>.DeepCopy() IEquivalent<IItem>.IsEquivalentTo(IItem) Namespace: InventorySystem.Items Assembly: InventorySystem.dll Syntax public interface IItem : ICopyable<IItem>, IEquivalent<IItem> Properties | Edit this page View Source ItemData Declaration ItemData ItemData { get; } Property Value Type Description ItemData"
  },
  "api/InventorySystem.Items.ItemData.html": {
    "href": "api/InventorySystem.Items.ItemData.html",
    "title": "Class ItemData | Inventory System",
    "summary": "Class ItemData UnityEngine.ScriptableObject containing data for a base IItem. Can be inherited by other UnityEngine.ScriptableObjects to extend to more specific items. Inheritance object Object ScriptableObject ItemData Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion, CancellationToken) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, CancellationToken) Object.InstantiateAsync<T>(T, InstantiateParameters, CancellationToken) Object.InstantiateAsync<T>(T, int, InstantiateParameters, CancellationToken) Object.InstantiateAsync<T>(T, Vector3, Quaternion, InstantiateParameters, CancellationToken) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion, InstantiateParameters, CancellationToken) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>, InstantiateParameters, CancellationToken) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate<T>(T, InstantiateParameters) Object.Instantiate<T>(T, Vector3, Quaternion, InstantiateParameters) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: InventorySystem.Items Assembly: InventorySystem.dll Syntax [Serializable] [CreateAssetMenu(fileName = \"Item\", menuName = \"InventorySystem/Items/Item\")] public class ItemData : ScriptableObject Fields | Edit this page View Source Icon Declaration public Sprite Icon Field Value Type Description Sprite | Edit this page View Source ItemDescription Declaration public string ItemDescription Field Value Type Description string | Edit this page View Source ItemName Declaration public string ItemName Field Value Type Description string | Edit this page View Source MaxStackAmount Declaration public int MaxStackAmount Field Value Type Description int | Edit this page View Source Prefab Declaration public GameObject Prefab Field Value Type Description GameObject | Edit this page View Source Uid Declaration public int Uid Field Value Type Description int"
  },
  "api/InventorySystem.Items.html": {
    "href": "api/InventorySystem.Items.html",
    "title": "Namespace InventorySystem.Items | Inventory System",
    "summary": "Namespace InventorySystem.Items Classes ItemData UnityEngine.ScriptableObject containing data for a base IItem. Can be inherited by other UnityEngine.ScriptableObjects to extend to more specific items. Interfaces IItem Base interface for anything regarded as an Item."
  },
  "api/InventorySystem.Utils.ICopyable-1.html": {
    "href": "api/InventorySystem.Utils.ICopyable-1.html",
    "title": "Interface ICopyable<TType> | Inventory System",
    "summary": "Interface ICopyable<TType> Make this able to be copied. Namespace: InventorySystem.Utils Assembly: InventorySystem.dll Syntax public interface ICopyable<TType> Type Parameters Name Description TType Type of class implementing this that can be copied. Methods | Edit this page View Source DeepCopy() Create a deep copy of this TType. Declaration TType DeepCopy() Returns Type Description TType A deep copy of this TType. Remarks Deep Copy: A deep copy of an object is a copy whose properties do not share the same references (point to the same underlying values) as those of the source object from which the copy was made. https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy"
  },
  "api/InventorySystem.Utils.IEquivalent-1.html": {
    "href": "api/InventorySystem.Utils.IEquivalent-1.html",
    "title": "Interface IEquivalent<TType> | Inventory System",
    "summary": "Interface IEquivalent<TType> Check if this is equivalent to another \"other\" object. This is not the same as Equals, as we do not compare the object instance but rather the state of this to \"other\". Namespace: InventorySystem.Utils Assembly: InventorySystem.dll Syntax public interface IEquivalent<TType> Type Parameters Name Description TType Type of the class implementing this that can be checked for equivalence. Methods | Edit this page View Source IsEquivalentTo(TType) Check if this is the same type TType in the same internal state as other TType. Declaration bool IsEquivalentTo(TType other) Parameters Type Name Description TType other The object TType to be compared against. Returns Type Description bool Whether this and other are equivalent in type and internal state."
  },
  "api/InventorySystem.Utils.MathUtils.html": {
    "href": "api/InventorySystem.Utils.MathUtils.html",
    "title": "Class MathUtils | Inventory System",
    "summary": "Class MathUtils Static Utility for common math problems. Inheritance object MathUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: InventorySystem.Utils Assembly: InventorySystem.dll Syntax public static class MathUtils Methods | Edit this page View Source ClampWithLeftover(int, int) Clamps a value to a max limit and returns the clamped value and leftover. Declaration public static (int clampedValue, int leftover) ClampWithLeftover(int originalValue, int max) Parameters Type Name Description int originalValue The original value before clamping. int max The maximum allowed value. Returns Type Description (int clampedValue, int leftover) A tuple of (clampedValue, leftover)"
  },
  "api/InventorySystem.Utils.html": {
    "href": "api/InventorySystem.Utils.html",
    "title": "Namespace InventorySystem.Utils | Inventory System",
    "summary": "Namespace InventorySystem.Utils Classes MathUtils Static Utility for common math problems. Interfaces ICopyable<TType> Make this able to be copied. IEquivalent<TType> Check if this is equivalent to another \"other\" object. This is not the same as Equals, as we do not compare the object instance but rather the state of this to \"other\"."
  },
  "index.html": {
    "href": "index.html",
    "title": "Inventory System Documentation | Inventory System",
    "summary": "Inventory System Documentation Inventory System is a Unity package for a \"generic\" Inventory System for Unity. It includes a basic Inventory and a basic Equipment Inventory. Installation To install this package, in Unity, go to \"Window -> Package Manager\". Then, press the \"+\" Symbol on the top left of the Package Manager. Then, \"Install package from git URL...\" and then simply paste: https://github.com/NickWittig/inventory-system.git Usage To create an Inventory, use the InventoryFactory.Create() method. IInventory defines all available methods for the Inventory. To create an EquipmentInventory, use the EquipmentInventoryFactory.Create() method. IEquipmentInventory defines all available methods for the Equipment Inventory. Source The source code is managed on GitHub."
  }
}